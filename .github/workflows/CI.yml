name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main!]

env:
  BUILD_TYPE: Debug

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11]
        mpi: [MPICH, OpenMPI]
        exclude:
          - os: macos-11
            mpi: OpenMPI

    # The CMake configure and build commands are platform agnostic and
    # should work equally well on Windows or Mac. You can convert this
    # to a matrix build if you need cross-platform coverage. See:
    # https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@v2

    - name: Install ${{matrix.mpi}}
      run: |
        case $RUNNER_OS in
        Linux)
            case "${{matrix.mpi}}" in
                MPICH) packages=libmpich-dev;;
                OpenMPI) packages=libopenmpi-dev;;
            esac
            sudo apt-get install $packages
            ;;
        macOS)
            # case "${{matrix.mpi}}" in
            #     MPICH) packages=mpich;;
            #     OpenMPI) packages=open-mpi;;
            # esac
            # brew install $packages

            # Install MacPorts
            wget https://github.com/macports/macports-base/releases/download/v2.7.1/MacPorts-2.7.1-11-BigSur.pkg
            sudo /usr/sbin/installer -pkg MacPorts-2.7.1-11-BigSur.pkg -target /
            rm MacPorts-2.7.1-11-BigSur.pkg
            echo /opt/local/bin >> $GITHUB_PATH
            echo /opt/local/sbin >> $GITHUB_PATH
            export "PATH=/opt/local/bin:/opt/local/sbin:$PATH"

            case "${{matrix.mpi}}" in
                MPICH) packages='mpich-gcc10 +fortran';;
                OpenMPI) packages='openmpi-gcc11 +fortran';;
            esac
            sudo port install $packages
            ;;
        esac

    - name: Configure
      run: |
        if [ $RUNNER_OS = macOS -a ${{matrix.mpi}} = MPICH ]; then
            echo 'os=Darwin, mpi=MPICH'
            cmake -B ${{github.workspace}}/build \
                -DCMAKE_CXX_COMPILER=g++-mp-10 \
                -DCMAKE_Fortran_COMPILER=gfortran-mp-10 \
                -DMPI_CXX_ADDITIONAL_INCLUDE_DIRS=/opt/local/include/mpich-gcc10 \
                -DMPI_CXX_LIB_NAMES='mpicxx;mpi;pmpi' \
                -DMPI_Fortran_ADDITIONAL_INCLUDE_DIRS=/opt/local/include/mpich-gcc10 \
                -DMPI_Fortran_LIB_NAMES='mpifort;mpi;pmpi' \
                -DMPI_mpi_LIBRARY=/opt/local/lib/mpich-gcc10/libmpi.dylib \
                -DMPI_mpicxx_LIBRARY=/opt/local/lib/mpich-gcc10/libmpicxx.dylib \
                -DMPI_mpifort_LIBRARY=/opt/local/lib/mpich-gcc10/libmpifort.dylib \
                -DMPI_pmpi_LIBRARY=/opt/local/lib/mpich-gcc10/libpmpi.dylib \
                -DMPIEXEC_EXECUTABLE=/opt/local/bin/mpiexec-mpich-gcc10 \
                -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                -DCMAKE_INSTALL_PREFIX=$HOME/mpiwrapper-${{matrix.mpi}} || true
            echo "/Users/runner/work/MPIwrapper/MPIwrapper/build/CMakeFiles/CMakeOutput.log" || true
            cat "/Users/runner/work/MPIwrapper/MPIwrapper/build/CMakeFiles/CMakeError.log" || true
            echo "/Users/runner/work/MPIwrapper/MPIwrapper/build/CMakeFiles/CMakeOutput.log" || true
            cat "/Users/runner/work/MPIwrapper/MPIwrapper/build/CMakeFiles/CMakeError.log" || true
        else
            echo 'default'
            cmake -B ${{github.workspace}}/build \
                -DCMAKE_CXX_COMPILER=mpicxx \
                -DCMAKE_Fortran_COMPILER=mpif90 \
                -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                -DCMAKE_INSTALL_PREFIX=$HOME/mpiwrapper-${{matrix.mpi}}
        fi

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Install
      run: cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
